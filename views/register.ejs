<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Register | Zero Degree Caf√©</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
  <style>
    .link a {
      text-decoration: none;
      color: #000;
    }
    .link a:hover {
      text-decoration: underline;
      color: rgb(89, 78, 78);
    }
    .container {
      width: 720px;
      margin: 0 auto;
      background-color: #ffffff;
      border-radius: 30px;
      height: auto;
      padding-bottom: 20px;
      box-shadow: 0 6px 18px rgba(0, 0, 0, 0.5);
    }
    body {
      background: linear-gradient(145deg, #1d3c5a, #3a5f7d);
      min-height: 100vh;
      display: flex;
      justify-content: center;
      align-items: center;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    .createBtn {
      background: linear-gradient(145deg, #1d3c5a, #3a5f7d);
      border: none;
      color: white;
      font-weight: 600;
      padding: 10px 25px;
      border-radius: 6px;
      transition: background 0.3s ease, transform 0.2s ease;
      cursor: pointer;
    }
    .createBtn:hover, .createBtn:focus {
      background: linear-gradient(145deg, #3a5f7d, #1d3c5a);
      transform: scale(1.05);
      color: white;
      outline: none;
    }
    .rules {
      display: none;
      margin-top: 10px;
      font-size: 14px;
    }
    .rules span {
      display: block;
      margin: 3px 0;
    }
    .valid { color: green; }
    .invalid { color: red; }

    #otpInputs .otp-field {
      width: 45px;
      height: 55px;
      font-size: 1.5rem;
      border: 2px solid #ccc;
      border-radius: 8px;
    }
    #otpInputs .otp-field:focus {
      border-color: #0d6efd;
      outline: none;
      box-shadow: 0 0 5px rgba(13, 110, 253, 0.5);
    }

@media (max-width: 768px) {
  .container {
    width: 95%;
    padding: 15px;
    border-radius: 20px;
  }
  .form-container {
    width: 100% !important;
    padding: 0 10px;
  }
  .row > .col {
    flex: 0 0 48%;
    max-width: 48%;
    margin-right: 4%;
  }
  .row > .col:last-child {
    margin-right: 0;
  }

  #otpInputs .otp-field {
    width: 40px;
    height: 50px;
    font-size: 1.2rem;
  }
  .createBtn {
    width: 100%;
    padding: 10px;
  }
  .text-center img {
    width: 90px;
    height: 90px;
  }
  .link p {
    font-size: 0.9rem;
  }
}

@media (max-width: 480px) {
  .container {
    padding: 10px;
  }
  .text-center h2 {
    font-size: 1.5rem;
  }
  .text-center p {
    font-size: 0.85rem;
  }
  #otpInputs .otp-field {
    width: 35px;
    height: 45px;
    font-size: 1rem;
  }
  .createBtn {
    font-size: 0.9rem;
    padding: 8px;
  }
  .row > .col {
    flex: 0 0 48%;
    max-width: 48%;
    margin-right: 4%;
  }
  .row > .col:last-child {
    margin-right: 0;
  }
}
  </style>
</head>
<body>
  <div class="container">
    <div class="text-center mt-3">
      <img src="/images/zicon.jpg" alt="Logo" class="img-fluid mb-3 mt-2" style="width: 110px; border-radius: 50%; height: 110px;">
      <h2 class="fw-bold">Registration</h2>
      <p class="lead">Create an account to enjoy our services.</p>
    </div>
    <div class="form-container mx-auto" style="width: 650px;">
      <form id="registerForm">
        <div class="row">
          <div class="col mb-2">
            <label for="firstName" class="form-label"><i class="bi bi-person-circle"></i> First Name</label>
            <input type="text" id="firstName" name="firstName" class="form-control" placeholder="First Name:" required>
          </div>
          <div class="col mb-2">
            <label for="lastName" class="form-label"><i class="bi bi-person-circle"></i> Last Name</label>
            <input type="text"  id="lastName" name="lastName" class="form-control" placeholder="Last Name:" required>
          </div>
        </div>
        
        <div class="row">
          <div class="col mb-2">
            <label for="phone" class="form-label"><i class="bi bi-telephone-fill"></i> Phone</label>
            <input type="number" id="phone" name="phone" class="form-control" placeholder="0936XXX89XX" required maxlength="11">
          </div>
          <div class="col mb-2">
            <label for="address" class="form-label"><i class="bi bi-house-fill"></i> Address</label>
            <input type="text" id="address" name="address" class="form-control" placeholder="Street, Road, City" required>
          </div>
        </div>

        <div class="row">
          <div class="col">
            <label for="username" class="form-label"><i class="bi bi-file-person"></i> Username</label>
            <input type="text" id="username" name="username" class="form-control" placeholder="Username:" required>
          </div>
          <div class="col mb-2">
            <label for="email" class="form-label"><i class="bi bi-envelope-fill"></i> Email</label>
            <input type="email" id="email" name="email" class="form-control" placeholder="email@gmail.com" required>
          </div>
        </div>

        <div class="row">
          <div class="col mb-2">
            <label for="password" class="form-label"><i class="bi bi-lock-fill"></i> Password</label>
            <div class="input-group">
              <input type="password" id="password" name="password" class="form-control" placeholder="Password:" required>
              <span class="input-group-text" style="cursor: pointer;">
                <i class="bi bi-eye-slash" id="eyeIcon1"></i>
              </span>
            </div>
            <div class="rules" id="rules">
              <span id="length">At least 8 characters</span>
              <span id="uppercase">At least 1 uppercase letter</span>
              <span id="lowercase">At least 1 lowercase letter</span>
              <span id="number">At least 1 number</span>
              <span id="special">At least 1 special character</span>
            </div>
          </div>
          <div class="col mb-2">
            <label for="confirm_password" class="form-label"><i class="bi bi-lock-fill"></i> Confirm Password</label>
            <div class="input-group">
              <input type="password" id="confirm_password" name="confirm_password" class="form-control" placeholder="Confirm Password:" required>
              <span class="input-group-text" style="cursor: pointer;">
                <i class="bi bi-eye-slash" id="eyeIcon2"></i>
              </span>
            </div>
          </div>
        </div>

        <div class="d-flex justify-content-center align-items-center mt-3">
          <button type="submit" class="createBtn"><i class="bi bi-check-circle"></i>  Create Account</button>
        </div>

        <div class="mt-3">
          <div class="link">
            <p class="text-center">Already have an account? <a href="/login" class="fw-semibold">Login here</a></p>
          </div>
        </div>
      </form>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  <script>
  function setupToggler(inputId, iconId) {
    const input = document.getElementById(inputId);
    const icon = document.getElementById(iconId);
    icon.parentElement.addEventListener("click", () => {
      input.type = input.type === "password" ? "text" : "password";
      icon.classList.toggle("bi-eye");
      icon.classList.toggle("bi-eye-slash");
    });
  }
  setupToggler("password", "eyeIcon1");
  setupToggler("confirm_password", "eyeIcon2");

  const password = document.getElementById("password");
  const rulesBox = document.getElementById("rules");

  password.addEventListener("focus", () => {
    rulesBox.style.display = "block";
  });

  password.addEventListener("blur", () => {
    if (password.value === "") {
      rulesBox.style.display = "none";
    }
  });

  password.addEventListener("input", () => {
    const val = password.value;
    const updateRule = (id, condition, text) => {
      const el = document.getElementById(id);
      if (condition) {
        el.classList.add("valid");
        el.classList.remove("invalid");
        el.textContent = text;
      } else {
        el.classList.add("invalid");
        el.classList.remove("valid");
        el.textContent = text;
      }
    };
    updateRule("length", val.length >= 8, "At least 8 characters");
    updateRule("uppercase", /[A-Z]/.test(val), "At least 1 uppercase letter");
    updateRule("lowercase", /[a-z]/.test(val), "At least 1 lowercase letter");
    updateRule("number", /[0-9]/.test(val), "At least 1 number");
    updateRule("special", /[^A-Za-z0-9]/.test(val), "At least 1 special character");
  });

  function showModal(type, title, message, redirectUrl = null) {
    const notifIcon = document.getElementById("notifIcon");
    const notifTitle = document.getElementById("notifTitle");
    const notifMessage = document.getElementById("notifMessage");

    notifTitle.textContent = title;
    notifMessage.textContent = message;

    notifIcon.className = "bi fs-1 mb-3";
    if (type === "success") notifIcon.classList.add("bi-check-circle-fill", "text-success");
    if (type === "error") notifIcon.classList.add("bi-x-circle-fill", "text-danger");
    if (type === "info") notifIcon.classList.add("bi-info-circle-fill", "text-info");

    const modal = new bootstrap.Modal(document.getElementById("notificationModal"));
    modal.show();

    document.getElementById("notificationModal").addEventListener("hidden.bs.modal", () => {
      if (redirectUrl) window.location.href = redirectUrl;
    }, { once: true });
  }

  document.getElementById("registerForm").addEventListener("submit", async function (e) {
    e.preventDefault();

    const passwordVal = document.getElementById("password").value;
    const confirmPasswordVal = document.getElementById("confirm_password").value;

    const validations = {
      length: passwordVal.length >= 8,
      uppercase: /[A-Z]/.test(passwordVal),
      lowercase: /[a-z]/.test(passwordVal),
      number: /[0-9]/.test(passwordVal),
      special: /[^A-Za-z0-9]/.test(passwordVal),
    };

    if (!Object.values(validations).every(Boolean)) {
      showModal("error", "Weak Password", "Please follow all password rules before proceeding.");
      return;
    }

    if (passwordVal !== confirmPasswordVal) {
      showModal("error", "Password Mismatch", "Password and confirm password do not match.");
      return;
    }

    const formData = {
      firstName: document.getElementById("firstName").value,
      lastName: document.getElementById("lastName").value,
      phone: document.getElementById("phone").value,
      address: document.getElementById("address").value,
      username: document.getElementById("username").value,
      email: document.getElementById("email").value,
      password: passwordVal,
      confirm_password: confirmPasswordVal,
    };

    try {
      const res = await fetch("/register", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(formData)
      });
      const data = await res.json();

      if (data.message && data.message.includes("OTP sent")) {
        const otpModal = new bootstrap.Modal(document.getElementById("otpModal"));
        otpModal.show();

        document.getElementById("verifyOtpBtn").onclick = async () => {
          const otp = document.getElementById("otpInput").value;
          const verifyRes = await fetch("/verify-otp", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ email: formData.email, otp })
          });
          const verifyData = await verifyRes.json();
          if (verifyData.message && verifyData.message.includes("verified")) {
            showModal("success", "Verified!", "Your account has been created.", "/login");
          } else {
            showModal("error", "Error", verifyData.message || "Invalid OTP");
          }
        };

        document.getElementById("resendOtpBtn").onclick = async () => {
          const resendRes = await fetch("/resend-otp", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ email: formData.email })
          });
          const resendData = await resendRes.json();
          showModal("info", "OTP Resent", resendData.message || "Check your email again.");
        };
      } else {
        showModal("error", "Error", data.message || "Registration failed");
      }
    } catch (err) {
      console.error(err);
      showModal("error", "Error", "Something went wrong!");
    }
  });
  </script>
  <script>
    let resendCooldown = 300; 
    let resendInterval;

    function startResendCooldown() {
      const resendBtn = document.getElementById("resendOtpBtn");
      const resendTimer = document.getElementById("resendTimer");
      resendBtn.disabled = true;

      let remaining = resendCooldown;
      updateTimerText();

      resendInterval = setInterval(() => {
        remaining--;
        updateTimerText();
        if (remaining <= 0) {
          clearInterval(resendInterval);
          resendBtn.disabled = false;
          resendTimer.textContent = "";
          resendBtn.innerHTML = '<i class="bi bi-arrow-repeat me-2"></i> Resend OTP';
        }
      }, 1000);

      function updateTimerText() {
        const minutes = String(Math.floor(remaining / 60)).padStart(2, "0");
        const seconds = String(remaining % 60).padStart(2, "0");
        resendTimer.textContent = `(${minutes}:${seconds})`;
      }
    }

    document.getElementById("resendOtpBtn").addEventListener("click", async () => {
      const resendBtn = document.getElementById("resendOtpBtn");
      resendBtn.innerHTML = '<i class="bi bi-hourglass-split me-2"></i> Please wait...';
      startResendCooldown();

      const email = document.getElementById("email").value;
      const resendRes = await fetch("/resend-otp", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email })
      });
      const resendData = await resendRes.json();
      showModal("info", "OTP Resent", resendData.message || "Check your email again.");
    });

    document.getElementById("otpModal").addEventListener("shown.bs.modal", () => {
      startResendCooldown();
    });
</script>
<script>
  const otpFields = document.querySelectorAll(".otp-field");
  otpFields.forEach((field, index) => {
    field.addEventListener("input", () => {
      if (field.value.length === 1 && index < otpFields.length - 1) {
        otpFields[index + 1].focus();
      }
    });
    field.addEventListener("keydown", (e) => {
      if (e.key === "Backspace" && !field.value && index > 0) {
        otpFields[index - 1].focus();
      }
    });
  });

  function getOtpValue() {
    return Array.from(otpFields).map(f => f.value).join("");
  }

document.getElementById("verifyOtpBtn").addEventListener("click", async () => {
  const otp = getOtpValue(); 

  const email = document.getElementById("email").value;

  try {
    const res = await fetch("/verify-otp", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ email, otp })
    });
    const data = await res.json();

    if (data.message && data.message.includes("verified")) {
      showModal("success", "Verified!", "Your account has been created.", "/login");
    } else {
      showModal("error", "Error", data.message || "Invalid OTP");
    }
  } catch (err) {
    console.error(err);
    showModal("error", "Error", "Something went wrong!");
  }
});
</script>
</body>
</html>
